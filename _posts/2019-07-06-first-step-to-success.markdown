---
layout:     post
title:      "扬帆，起航（一）"
subtitle:   "YG的博客搭建之旅"
date:       2019-07-06 11:50:24 GMT+8
author:     "Yang Guang"
header-style: text
tags:
    - Jekyll
    - 博客搭建
    - 技术
---

>本文主要记录博客的搭建过程，以及出现的问题。本文撰写时，博客整体框架已基本完成，还有许多细节需要调整。如果你是大牛，那么这篇文章可能对你来说没什么用，如果你也想搭建一个属于自己的博客，那么读完本文，你一定会有所收获。

### 前言

一直以来都想搭建一个自己的博客，可是一直都被杂七杂八的事情困扰着，最近终于有时间搞点自己的东西了，第一个想法就是把我搁置了一年的博客计划提上日程，毕竟租的阿里云服务器已经空跑了`一年`了。

### 准备工作

想要别人可以随时随地访问你的博客网站，你就需要时刻提供让别人可以`随时访问`的服务，也就是说你需要一台`一直运行`你的博客程序的电脑或者服务器，并且别人可以通过`特定的地址`访问到你的电脑或服务器。

#### 服务器与域名

想要`一直运行`并且`随时访问`，虽然用自己的个人电脑搭建一台服务器可以达到这个效果，但是限制比较多一点。想要别人可以通过`特定地址访问`，告诉别人你的IP地址虽然可以达到这个效果，但是谁会去费心思记住那么一长串乱七八糟的数字呢。试想如果所有的网站都需要通过IP地址访问，那么我们是不是需要找一个小本本，记录所有的IP和网站的对应关系，然后每次用到的时候就去这个小本本里面找呢？如果你的小本本丢了呢？所以前辈们就发明了域名这个东西，既然发明了那么肯定要用啊。于是乎，笔者就选用的是阿里云服务器并购买了自己的域名。

至于服务器和域名的购买并不在本文的讨论范围，如有疑惑你可以咨询服务器运营商的客服，或者自己上网查找答案。

>注意，本文并不是给阿里云做广告，国内申请域名比较麻烦的地方在于你需要进行备案，备案周期通常在一到两周左右。

##### 服务器IP与域名的绑定

购买服务器以及域名之后，还需将服务器与域名绑定起来，这样才能让人访问你的域名时访问到你的服务器而不是别人的，需要在阿里云的域名解析界面添加一条解析记录。具体的页面如下图，该页面是笔者撰写本文时的页面，之后可能会发生改变。

![](/assets/images/2019/DomainNameResolution.jpeg)

##### 开启服务器端口

想要服务器可以响应HTTP链接，必须要开启80端口，对于阿里云的服务器，需要登陆阿里云网站的控制台，添加过滤规则，开启80端口。如果需要HTTPS，则要开启443端口，如下图。

![](/assets/images/2019/SecurityGroupRules.png)

#### 技术选型

服务器以及域名弄完以后，就可以着手搭建自己的博客了。

搭建博客的方法以及工具有很多，笔者在此处不再赘述，有心的读者可以自行Baidu或者Google，笔者选用了nginx+Jekyll的方式。至于为何选用这种方式，那就是两个字：懒。言归正传，因为笔者是做移动端开发的，对于服务器不是非常熟悉，觉得nginx比较牛X，所以就用了（跟着感觉走的，如果用法有问题希望各位读者批评指正）。至于Jekyll，它的优点之一就是不需要数据库、不需要数据库、不需要数据库，（好吧，其实是我对数据库也不是很熟悉，虽然网上有那种一键搭建博客的工具，但我就是懒得用），它只需要我们用markdown写好每片文章即可，它会帮我们自动生成对应文章的html，是不是很方便呢，这样我们就可以专注于写作即可，比较适合我这样的懒人。

### 开发环境

笔者本地环境是MacOS，服务器系统是CentOS，首先介绍一下这两个系统上Jekyll环境的配置。

#### MacOS环境配置

##### 安装Ruby

Jekyll是基于Ruby开发的，所以想要运行Jekyll首先要有Ruby环境。MacOS系统会自带Ruby，不过Ruby版本较低，Jekyll官网上说Ruby版本需要2.4.0及以上，所以笔者需要安装高版本的Ruby（注意：此处不要试图去更新系统自带的ruby，因为系统的某些软件可能是基于系统的Ruby运行，更新以后那些软件可能无法正常运行）。笔者在Mac下通过Homebrew进行安装，命令如下

```bash
brew install ruby
```

如果没有Homebrew，可以现通过如下命令安装

```bash
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
```

安装过程可能需要几分钟，请耐心等待即可。
安装完成之后，运行`ruby -v`你可能发现输出还是`/usr/bin/ruby`，因为系统默认先搜索的路径是`/usr/bin`，在命令行输入`echo $PATH`会有如下输出：

```
/usr/bin:/bin:/usr/sbin:/sbin
```

可以看到系统并不会去搜索你新安装的ruby位置，所以需要将路径加入`$PATH`。笔者这里采用的方法是修改`~/.zshrc`文件（笔者用的是zsh，使用bash的用户，修改方法相同），在文件末尾添加如下命令：

```bash
export PATH="/usr/local/opt/ruby/bin:$PATH"
```

也就是将`/usr/local/opt/ruby/bin`添加到`$PATH`文件的最前面，这样系统搜索时就会优先搜索。
添加完成以后需要重新开启终端或者输入`source ~/.zshrc`使配置文件生效，再次运行`ruby -v`，会有如下输出（版本号可能不同）：

```
ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin18]
```

##### 安装Jekyll

安装好Ruby之后，安装Jekyll就比较简单了，一句好搞定。

```bash
gem install jekyll
```
安装完成以后运行`jekyll`，可能会出现如下错误：

```
zsh: command not found: jekyll
```

这个问题和上个问题出现的原因相同，还是因为系统找不到此命令，解决方法和前面一样，将路径添加到`$PATH`。这里笔者采用另外一种方法，将jekyll放到系统可以找到的路径即可。

```bash
ln -s /usr/local/lib/ruby/gems/2.6.0/bin/jekyll /usr/local/bin/jekyll
```

这个命令是将jekyll链接到`/usr/local/bin`中，由于系统会搜索此路径，然后就可以通过该链接找到jekyll真正位置，再次运行

```bash
jekyll -v
//output: jekyll 3.8.6
```

至此，jekyll已安装完成，本地开发环境已经搭建完成。

#### 服务器环境

如果服务器不需要对代码进行编译，那么其实服务器是不需要安装ruby的，所需要做的就是在本地生成站点相关html，然后上传到服务器托管目录即可。
由于笔者当初的想法是直接push代码到服务器，然后在服务器上生成博客的相关页面，所以就在服务器上也搭建了一下ruby环境。

##### 安装Ruby

由于服务器系统是CentOS，基于Linux，并没有Homebrew这种东西，因此此处采用rvm来安装ruby（其实Mac也可以通过rvm安装）。

###### 安装rvm

此处笔者也是参考的[rvm官方网站](http://www.rvm.io)

1.安装GPG keys:
```bash
gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
```

2.安装RVM

```bash
curl -sSL https://get.rvm.io | bash -s stable
```

###### 通过rvm安装ruby

只需要知道你想要安装的版本号就行，下面的命令就是安装2.3.0版本的ruby

```bash
rvm install 2.3.0
```

安装完成之后需要指定新安装的版本为默认版本

```bash
rvm use 2.3.0
```

至此ruby已经安装完成，至于rvm的其它命令，读者有兴趣可以自行研究，这里不再赘述。

##### 安装jekyll

和上面相同，使用gem安装。


### 简单使用

简单举个例子

```bash
cd ~
jekyll new myblog
cd myblog
jekyll build
jekyll serve
```
通过以上命令就可以跑起来一个本地的博客服务，跑起来以后可以在浏览器输入`localhost:4000`来查看，刚刚由jekyll自动生成的站点。

### 小结

上面对ruby以及jekyll环境的搭建进行了简要说明，在之后的文章中，我们会真正的搭建一个可以运行在服务器上的博客程序。