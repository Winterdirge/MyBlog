---
layout:     post
title:      Metal探索之旅(四)
subtitle:   Synchronizing CPU and GPU Work
date:       2019-09-09 11:08:45 GMT+8
author:     "Yang Guang"
header-style: text
tags:
    - iOS
    - 技术
    - 渲染
    - GPU
    - Metal
---

### 前面

上一篇文章我们介绍了使用Metal来绘制一个简单的彩色三角形，本篇文章的主要内容是绘制一堆这样的三角形，并使三角形以正弦曲线的方式排列起来。通过本文，你将会学到如何管理数据依赖关系，并且避免CPU和GPU由于交换数据引起的处理暂停。

![](/assets/images/2019/learn_metal_06.png)

### 了解数据依赖和处理器暂停的解决方案

资源共享会在处理器之间创建数据依赖，GPU读取数据前，CPU必须完成写入操作。如果GPU读取数据在CPU写入之前，那么GPU就会读取未定义的资源数据。如果GPU在CPU写入时读取数据，那么就会读取错误的资源数据。

![](/assets/images/2019/learn_metal_07.png)

这些个数据之间的依赖关系就导致了CPU和GPU之间的处理暂停，每个处理器必须要等待另一个完成之后才可以开始自己的工作。

然而，GPU和GPU是独立的处理器，你可以通过使用一个资源的多个实例让它们同时工作。每一帧，你必须向着色器提供相同的参数，但是这并不意味着你需要引用相同的资源对象。相反，你可以创建包含一个资源不同实例的池子，每当进行渲染时使用不同的实例。例如，CPU向缓冲区写入渲染n+1帧所需要的位置数据，同时GPU从缓冲区读取第n帧渲染所需要的位置信息。通过使用一个缓冲区的不同实例，只要你持续进行渲染，CPU和GPU就可以同时工作，避免暂停。